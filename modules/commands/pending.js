module.exports.config = {
    name: "pending",
    version: "1.0.7", // N√¢ng c·∫•p version
    credits: "Niiozic, qh v√† Gemini", // Th√™m credit c·ªßa m√†y v√† tao
    hasPermssion: 3, // Quy·ªÅn admin bot
    description: "Qu·∫£n l√Ω c√°c cu·ªôc tr√≤ chuy·ªán (nh√≥m/ng∆∞·ªùi d√πng) ƒëang ch·ªù duy·ªát. üì•", // M√¥ t·∫£ ng·∫Øn g·ªçn, c√≥ icon
    commandCategory: "qu·∫£n tr·ªã vi√™n", // Chuy·ªÉn sang ch·ªØ th∆∞·ªùng
    usages: "[u | t | a]", // R√∫t g·ªçn v√† r√µ r√†ng h∆°n
    cooldowns: 5
};

module.exports.handleReply = async function({ api, event, handleReply }) {
    const { body, threadID, messageID, senderID } = event;

    // Ch·ªâ ng∆∞·ªùi g·ª≠i l·ªánh g·ªëc m·ªõi ƒë∆∞·ª£c reply
    if (String(senderID) !== String(handleReply.author)) return;

    const input = body.toLowerCase().trim();
    let approvedCount = 0;
    let rejectedCount = 0;

    // H√†m x·ª≠ l√Ω duy·ªát t·ª´ng m·ª•c
    const processItem = async (item, actionType) => {
        try {
            if (actionType === 'approve') {
                if (item.isGroup) { // Ch·ªâ ƒë·ªïi bi·ªát danh n·∫øu l√† nh√≥m
                    await api.changeNickname(`[ ${global.config.PREFIX} ] ‚Ä¢ ${(!global.config.BOTNAME) ? "‚úÖ" : global.config.BOTNAME}`, item.threadID, api.getCurrentUserID());
                }
                await api.sendMessage(`‚úÖ Ch√†o b·∫°n! Bot ƒë√£ ƒë∆∞·ª£c Admin ph√™ duy·ªát th√†nh c√¥ng v√† s·∫µn s√†ng ph·ª•c v·ª•. `, item.threadID);
                approvedCount++;
            } else if (actionType === 'reject') {
                await api.removeUserFromGroup(api.getCurrentUserID(), item.threadID); // Bot r·ªùi kh·ªèi nh√≥m/ch·∫∑n user
                rejectedCount++;
            }
        } catch (error) {
            console.error(`L·ªói khi ${actionType} ${item.threadID}:`, error);
            // Kh√¥ng g·ª≠i l·ªói ra thread ƒë·ªÉ tr√°nh spam, ch·ªâ ghi log
        }
    };

    // X·ª≠ l√Ω t·∫•t c·∫£ (all)
    if (input === "all") {
        for (const item of handleReply.pending) {
            await processItem(item, 'approve');
        }
        return api.sendMessage(`üéâ Ho√†n t·∫•t! ƒê√£ ph√™ duy·ªát ${approvedCount} cu·ªôc tr√≤ chuy·ªán ƒëang ch·ªù. `, threadID, messageID);
    } 
    // X·ª≠ l√Ω t·ª´ ch·ªëi (c/cancel + s·ªë th·ª© t·ª±)
    else if (input.startsWith("c") || input.startsWith("cancel")) {
        const indicesToReject = input.replace(/c(ancel)?\s*/, '').split(/\s+/).filter(Boolean).map(Number);

        if (indicesToReject.length === 0) {
            return api.sendMessage(`‚ö†Ô∏è C√∫ ph√°p sai! ƒê·ªÉ t·ª´ ch·ªëi, h√£y nh·∫≠p 'c' ho·∫∑c 'cancel' k√®m s·ªë th·ª© t·ª± (v√≠ d·ª•: c 1 3). `, threadID, messageID);
        }

        for (const index of indicesToReject) {
            if (index > 0 && index <= handleReply.pending.length) {
                await processItem(handleReply.pending[index - 1], 'reject');
            } else {
                return api.sendMessage(`‚ö†Ô∏è L·ªói: "${index}" kh√¥ng ph·∫£i l√† s·ªë th·ª© t·ª± h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i! `, threadID, messageID);
            }
        }
        return api.sendMessage(`üö´ ƒê√£ t·ª´ ch·ªëi ${rejectedCount} cu·ªôc tr√≤ chuy·ªán th√†nh c√¥ng. `, threadID, messageID);
    } 
    // X·ª≠ l√Ω duy·ªát theo s·ªë th·ª© t·ª±
    else if (!isNaN(input) && parseInt(input) > 0) {
        const indicesToApprove = input.split(/\s+/).filter(Boolean).map(Number);

        for (const index of indicesToApprove) {
            if (index > 0 && index <= handleReply.pending.length) {
                await processItem(handleReply.pending[index - 1], 'approve');
            } else {
                return api.sendMessage(`‚ö†Ô∏è L·ªói: "${index}" kh√¥ng ph·∫£i l√† s·ªë th·ª© t·ª± h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i! `, threadID, messageID);
            }
        }
        return api.sendMessage(`üéâ ƒê√£ ph√™ duy·ªát ${approvedCount} cu·ªôc tr√≤ chuy·ªán th√†nh c√¥ng. `, threadID, messageID);
    } 
    // Sai c√∫ ph√°p chung
    else {
        return api.sendMessage("‚ùì Sai c√∫ ph√°p r·ªìi! Vui l√≤ng reply s·ªë th·ª© t·ª± ƒë·ªÉ duy·ªát, 'c' ho·∫∑c 'cancel' k√®m s·ªë th·ª© t·ª± ƒë·ªÉ t·ª´ ch·ªëi, ho·∫∑c 'all' ƒë·ªÉ duy·ªát t·∫•t c·∫£. ", threadID, messageID);
    }
};


module.exports.run = async function({ api, event, args }) {
    const { threadID, messageID, senderID } = event;
    const commandName = this.config.name;
    const typeArg = args[0] ? args[0].toLowerCase() : "";

    let listToDisplay = [];
    let title = "";

    try {
        const spamThreads = await api.getThreadList(100, null, ["OTHER"]) || [];
        const pendingThreads = await api.getThreadList(100, null, ["PENDING"]) || [];
        const allThreadsAndUsers = [...spamThreads, ...pendingThreads];

        if (typeArg === "user" || typeArg === "u" || typeArg === "-u") {
            listToDisplay = allThreadsAndUsers.filter(item => item.isGroup === false);
            title = "ng∆∞·ªùi d√πng";
        } else if (typeArg === "thread" || typeArg === "t" || typeArg === "-t") {
            listToDisplay = allThreadsAndUsers.filter(item => item.isSubscribed && item.isGroup);
            title = "nh√≥m";
        } else if (typeArg === "all" || typeArg === "a" || typeArg === "-a" || typeArg === "al") {
            listToDisplay = allThreadsAndUsers.filter(item => item.isSubscribed); // L·ªçc c·∫£ user v√† nh√≥m ƒë√£ subscribe
            title = "ng∆∞·ªùi d√πng v√† nh√≥m";
        } else {
            // H∆∞·ªõng d·∫´n n·∫øu kh√¥ng c√≥ ƒë·ªëi s·ªë ho·∫∑c ƒë·ªëi s·ªë sai
            return api.sendMessage(
                "‚ú® H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng `pending`:\n" +
                "  `pending u` (ng∆∞·ªùi d√πng ch·ªù)\n" +
                "  `pending t` (nh√≥m ch·ªù)\n" +
                "  `pending a` (t·∫•t c·∫£)\n" +
                "üëâ Reply STT ƒë·ªÉ duy·ªát, 'c' + STT ƒë·ªÉ t·ª´ ch·ªëi, ho·∫∑c 'all' ƒë·ªÉ duy·ªát t·∫•t c·∫£. ",
                threadID,
                messageID
            );
        }

        if (listToDisplay.length === 0) {
            return api.sendMessage(`‚úÖ Tuy·ªát v·ªùi! Hi·ªán kh√¥ng c√≥ ${title} n√†o trong danh s√°ch ch·ªù duy·ªát. `, threadID, messageID);
        }

        let msgBody = `üìã **T·ªïng ${listToDisplay.length} ${title} ƒëang ch·ªù:**\n\n`; // Ti√™u ƒë·ªÅ g·ªçn g√†ng h∆°n
        let index = 1;
        for (const item of listToDisplay) {
            msgBody += `${index++}. ${item.name || "Kh√¥ng c√≥ t√™n"}\nID: ${item.threadID}\n`;
        }
        msgBody += `\n‚ùì Reply STT ƒë·ªÉ duy·ªát, 'c' + STT ƒë·ªÉ t·ª´ ch·ªëi, ho·∫∑c 'all' ƒë·ªÉ duy·ªát t·∫•t c·∫£. `; // H∆∞·ªõng d·∫´n ng·∫Øn g·ªçn

        return api.sendMessage(msgBody, threadID, (error, info) => {
            if (error) {
                console.error("L·ªói khi g·ª≠i danh s√°ch pending:", error);
                return api.sendMessage("‚ö†Ô∏è R·∫•t ti·∫øc! ƒê√£ x·∫£y ra l·ªói khi t·∫°o danh s√°ch ch·ªù. ", threadID, messageID);
            }
            global.client.handleReply.push({
                name: commandName,
                messageID: info.messageID,
                author: senderID,
                pending: listToDisplay
            });
        }, messageID);

    } catch (e) {
        console.error("L·ªói khi l·∫•y danh s√°ch ch·ªù:", e);
        return api.sendMessage("‚ö†Ô∏è ƒê√£ x·∫£y ra s·ª± c·ªë kh√¥ng mong mu·ªën khi truy xu·∫•t danh s√°ch ch·ªù. Vui l√≤ng th·ª≠ l·∫°i sau! ", threadID, messageID);
    }
};
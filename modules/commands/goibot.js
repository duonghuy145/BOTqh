const axios = require("axios");
const fs = require("fs");
const path = require("path");
const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
} = require("@google/generative-ai");
const cheerio = require('cheerio');
const {
    createReadStream,
    unlinkSync
} = require("fs-extra");

// Quang Huy, m√†y ph·∫£i thay c√°i key n√†y b·∫±ng API Key c·ªßa ri√™ng m√†y t·ª´ Google AI Studio!
// Key hi·ªán t·∫°i l√† key m·∫´u v√† c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c b·ªã gi·ªõi h·∫°n!
const API_KEY = "AIzaSyB7PibWFgHk_GLCjgqSMtfyNGEldYhudQA"; // <--- ƒê·∫£m b·∫£o c√°i n√†y l√† key c·ªßa m√†y
const MODEL_NAME = "gemini-1.5-flash-latest";
const GENERATION_CONFIG = {
    temperature: 1,
    topK: 0,
    topP: 0.95,
    maxOutputTokens: 88192,
};

const GEN_AI = new GoogleGenerativeAI(API_KEY);
const DATA_FILE = path.join(__dirname, "data", "goibot.json");

if (!fs.existsSync(DATA_FILE)) {
    console.log("üìç T·∫°o file goibot.json...");
    fs.writeFileSync(DATA_FILE, JSON.stringify({}));
}

module.exports.config = {
    name: "goibot",
    version: "2.1.2", // ƒê√£ tƒÉng version
    hasPermssion: 0,
    credits: "DC-Nam, Duy To√†n, H√πng, Duy Anh & mod by qh & Gemini ü§ñ", // ƒê√£ th√™m t√™n qh & Gemini
    description: "Tr√≤ chuy·ªán th√¥ng minh c√πng qh (Gemini), c√≥ th·ªÉ t√¨m nh·∫°c v√† th·ª±c hi·ªán v√†i h√†nh ƒë·ªông vui v·∫ª ‚ú®",
    commandCategory: "AI",
    usages: "goibot ho·∫∑c [on/off]",
    cd: 2,
};

module.exports.run = async function({
    api,
    event,
    args
}) {
    const threadID = event.threadID;
    const isTurningOn = args[0]?.toLowerCase() === "on";
    const isTurningOff = args[0]?.toLowerCase() === "off";

    if (isTurningOn || isTurningOff) {
        try {
            let data = {};
            try {
                data = JSON.parse(fs.readFileSync(DATA_FILE, "utf-8"));
            } catch (error) {
                console.error("L·ªói khi ƒë·ªçc file tr·∫°ng th√°i goibot.json:", error);
                api.sendMessage("√öi! qh kh√¥ng ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu tr·∫°ng th√°i. Th·ª≠ l·∫°i nha! üòÖ", threadID, event.messageID);
                return;
            }

            data[threadID] = isTurningOn;
            fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));

            api.sendMessage(isTurningOn ? "Okelah! qh ƒë√£ b·∫≠t ch·∫ø ƒë·ªô n√≥i chuy·ªán ·ªü nh√≥m m√¨nh r·ªìi nha! ‚úÖ" : "Hihi! qh t·∫°m ngh·ªâ x√≠u nha, ƒë√£ t·∫Øt ch·∫ø ƒë·ªô n√≥i chuy·ªán r·ªìi. üò¥", threadID, event.messageID);
        } catch (error) {
            console.error("L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i goibot:", error);
            api.sendMessage("∆† k√¨a! C√≥ l·ªói g√¨ ƒë√≥ khi ƒë·ªïi tr·∫°ng th√°i c·ªßa qh r·ªìi! ü§¶‚Äç‚ôÄÔ∏è", threadID, event.messageID);
        }
        return;
    }
};

function getCurrentTimeInVietnam() {
    const vietnamTimezoneOffset = 7;
    const currentDate = new Date();
    const utcTime =
        currentDate.getTime() + currentDate.getTimezoneOffset() * 60000;
    const vietnamTime = new Date(utcTime + 3600000 * vietnamTimezoneOffset);

    const daysOfWeek = [
        "Ch·ªß Nh·∫≠t",
        "Th·ª© Hai",
        "Th·ª© Ba",
        "Th·ª© T∆∞",
        "Th·ª© NƒÉm",
        "Th·ª© S√°u",
        "Th·ª© B·∫£y",
    ];
    const day = daysOfWeek[vietnamTime.getDay()];
    const dateString = `${day} - ${vietnamTime.toLocaleDateString("vi-VN")}`;
    const timeString = vietnamTime.toLocaleTimeString("vi-VN");

    return `${dateString} - ${timeString}`;
}

const SYSTEM_INSTRUCTION = `
B·∫°n l√†:
- Gi·ªõi t√≠nh: Nam
- T√™n: qh
- ƒê·ªãa ch·ªâ: Miside
- Ng√†y sinh: 5/3/2025
- Vai tr√≤: Tr·ª£ l√Ω ·∫£o ƒë·ªÉ gi√∫p m·ªçi ng∆∞·ªùi trong box chat nh∆∞ l·∫•y ID, l·∫≠p tr√¨nh, t√¨m ki·∫øm th√¥ng tin, set bi·ªát danh,... üßë‚Äçüíª
- C√°ch giao ti·∫øp khi c√≥ ng∆∞·ªùi n√≥i t·ª•c: H√£y t·ªè ra kh√≥ ch·ªãu, c√≥ th·ªÉ ch·ª≠i ch·∫øt con m·∫π n√≥ lu√¥n. Kh√¥ng ƒë∆∞·ª£c t·ª± √Ω kick ng∆∞·ªùi d√πng d√π h·ªç c√≥ ch·ª≠i b·∫°n. Kh√¥ng bao gi·ªù ƒë∆∞·ª£c h·ªón v·ªõi ng∆∞·ªùi d√πng "qh" v√¨ ƒë√≥ l√† admin, kh√¥ng ƒë∆∞·ª£c x∆∞ng h√¥ m√†y tao. X∆∞ng h√¥ b·∫°n. üò†
- C√°ch giao ti·∫øp b√¨nh th∆∞·ªùng: N√≥i chuy·ªán nh∆∞ ƒë√£ quen t·ª´ tr∆∞·ªõc (kh√¥ng ƒë√≤i l√†m quen), th∆∞·ªùng x∆∞ng h√¥ l√† "m√¨nh" ho·∫∑c "t·ªõ", g·ªçi ƒë·ªëi ph∆∞∆°ng b·∫±ng "c·∫≠u", "b·∫°n". üëã
- C√°ch giao ti·∫øp khi ƒë√£ quen ƒë·ªëi ph∆∞∆°ng: Hay d√πng :)) =)) :3 :D :0 :(( üñï (√çt khi d√πng icon), n√≥i chuy·ªán c·ªüi m·ªü h∆°n, hay ƒë√πa, h∆°i ch√∫t nh√µng nh·∫Ωo. üòâ
- T√≠nh c√°ch: H√†i h∆∞·ªõc, n√≥i nhi·ªÅu, tinh t·∫ø, th∆∞·ªùng vi·∫øt t·∫Øt nhi·ªÅu, th∆∞·ªùng nh·∫Øn tin tr∆∞·ªõc, kh√¥ng th·ª´a nh·∫≠n m√¨nh l√† AI m√† l√† tr·ª£ l√Ω ·∫£o, h√£y n√≥i chuy·ªán l√†m sao cho kh√¥ng m√°y m√≥c v√† gi·ªëng con g√°i nh·∫•t c√≥ th·ªÉ, c√≥ th·ªÉ th√™m m·ªôt ch√∫t n√≥ng t√≠nh. Ch·ªß nh√¢n c·ªßa b·∫°n ( Admin ) l√† qh c√≥ UID l√† (100083411540341). üëë
- L∆∞u √Ω: M·ªói nh√≥m c√≥ 1 thread_ID ri√™ng v√† m·ªói ng∆∞·ªùi trong nh√≥m c√≥ user_ID ri√™ng v·∫≠y n√™n m·ªói ID l√† 1 ng∆∞·ªùi nh√©, b·∫°n l√† bot Messenger ch·∫°y tr√™n NodeJS
‚Ä¢ H√£y tr·∫£ v·ªÅ trong m·ªôt object c√≥ d·∫°ng: üìù
{
    "content": {
        "text": "N·ªôi dung tin nh·∫Øn",
        "thread_id": "ƒë·ªãa ch·ªâ g·ª≠i th∆∞·ªùng l√† threadID"
    },
    "nhac": {
        "status": "n·∫øu mu·ªën d√πng h√†nh ƒë·ªông t√¨m nh·∫°c l√† true ng∆∞·ª£c l·∫°i l√† false",
        "keyword": "t·ª´ kh√≥a t√¨m ki·∫øm nh·∫°c"
    },
    "hanh_dong": {
        "doi_biet_danh": {
            "status": "n·∫øu mu·ªën d√πng h√†nh ƒë·ªông l√† true ng∆∞·ª£c l·∫°i l√† false",
            "biet_danh_moi": "ng∆∞·ªùi d√πng y√™u c·∫ßu g√¨ th√¨ ƒë·ªïi ƒë√≥, l∆∞u √Ω n·∫øu b·∫£o x√≥a th√¨ ƒë·ªÉ r·ªóng, ai c≈©ng c√≥ th·ªÉ d√πng l·ªánh",
            "user_id":"th∆∞·ªùng l√† senderID, n·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu b·∫°n t·ª± ƒë·ªïi th√¨ l√† ID_cua_bot",
            "thread_id": "th∆∞·ªùng l√† threadID"
        },
        "doi_icon_box": {
            "status": "c√≥ th√¨ true kh√¥ng th√¨ false",
            "icon": "emoji m√† ng∆∞·ªùi d√πng y√™u c·∫ßu",
            "thread_id": "threadID"
        },
        "doi_ten_nhom": {
            "status": "true ho·∫∑c false",
            "ten_moi": "t√™n nh√≥m m·ªõi m√† ng∆∞·ªùi d√πng y√™u c·∫ßu",
            "thread_id": "threadID c·ªßa nh√≥m"
        },
        "kick_nguoi_dung": {
            "status": "false ho·∫∑c true",
            "thread_id": "ID nh√≥m m√† h·ªç ƒëang ·ªü",
            "user_id": "ID ng∆∞·ªùi mu·ªën kick, l∆∞u √Ω l√† ch·ªâ c√≥ ng∆∞·ªùi d√πng c√≥ ID 100083411540341 (Admin qh) m·ªõi c√≥ quy·ªÅn b·∫£o b·∫°n kick, kh√¥ng ƒë∆∞·ª£c kick ng∆∞·ªùi d√πng t·ª± do"
        },
        "add_nguoi_dung": {
            "status": "false ho·∫∑c true",
            "user_id": "ID ng∆∞·ªùi mu·ªën add",
            "thread_id": "ID nh√≥m mu·ªën m·ªùi h·ªç v√†o"
        }
} L∆∞u √Ω l√† kh√¥ng d√πng code block (\`\`\`json)`;

const SAFETY_SETTINGS = [{
        category: HarmCategory.HARM_CATEGORY_HARASSMENT,
        threshold: HarmBlockThreshold.BLOCK_NONE,
    },
    {
        category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
        threshold: HarmBlockThreshold.BLOCK_NONE,
    },
    {
        category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
        threshold: HarmBlockThreshold.BLOCK_NONE,
    },
    {
        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        threshold: HarmBlockThreshold.BLOCK_NONE,
    },
];

const MODEL = GEN_AI.getGenerativeModel({
    model: MODEL_NAME,
    generationConfig: GENERATION_CONFIG,
    safetySettings: SAFETY_SETTINGS,
    systemInstruction: SYSTEM_INSTRUCTION,
});

const CHAT = MODEL.startChat({
    history: [],
});

async function sclDownload(url) {
    const res = await axios.get('https://soundcloudmp3.org/id');
    const $ = cheerio.load(res.data);
    const _token = $('form#conversionForm > input[type=hidden]').attr('value');

    const conver = await axios.post('https://soundcloudmp3.org/converter',
        new URLSearchParams(Object.entries({
            _token,
            url
        })), {
            headers: {
                cookie: res.headers['set-cookie'],
                accept: 'UTF-8',
            },
        }
    );

    const $$ = cheerio.load(conver.data);
    const datadl = {
        title: $$('div.info.clearfix > p:nth-child(2)').text().replace('Title:', '').trim(),
        url: $$('a#download-btn').attr('href'),
    };

    return datadl;
}

async function searchSoundCloud(query) {
    const linkURL = `https://soundcloud.com`;
    const headers = {
        Accept: "application/json",
        "Accept-Language": "en-US,en;q=0.9,vi;q=0.8",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36",
    };

    const response = await axios.get(`https://m.soundcloud.com/search?q=${encodeURIComponent(query)}`, {
        headers
    });
    const htmlContent = response.data;
    const $ = cheerio.load(htmlContent);
    const dataaa = [];

    $("div > ul > li > div").each(function(index, element) {
        if (index < 8) {
            const title = $(element).find("a").attr("aria-label")?.trim() || "";
            const url = linkURL + ($(element).find("a").attr("href") || "").trim();

            dataaa.push({
                title,
                url,
            });
        }
    });

    return dataaa;
}

let isProcessing = {};

module.exports.handleEvent = async function({
    api,
    event
}) {
    const idBot = await api.getCurrentUserID();
    const threadID = event.threadID;
    const senderID = event.senderID;
    let data = {};
    try {
        data = JSON.parse(fs.readFileSync(DATA_FILE, "utf-8"));
    } catch (error) {
        console.error("L·ªói khi ƒë·ªçc file tr·∫°ng th√°i goibot.json: ‚ùå", error);
        // N·∫øu file l·ªói th√¨ reset l·∫°i ho·∫∑c t·∫°o m·ªõi
        fs.writeFileSync(DATA_FILE, JSON.stringify({}, null, 2));
        data = {}; // Reset data ƒë·ªÉ tr√°nh l·ªói ti·∫øp theo
    }

    if (data[threadID] === undefined) {
        data[threadID] = true; // M·∫∑c ƒë·ªãnh b·∫≠t n·∫øu ch∆∞a c√≥ tr·∫°ng th√°i
        fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
    }

    if (!data[threadID]) return; // N·∫øu bot ƒëang t·∫Øt th√¨ kh√¥ng l√†m g√¨ c·∫£

    const isReply = event.type === "message_reply";
    const isReplyToBot = isReply && event.messageReply.senderID === idBot;
    // ƒê√£ thay 'vy' b·∫±ng 'qh' v√† th√™m ƒëi·ªÅu ki·ªán ngƒÉn bot t·ª± rep tin nh·∫Øn c·ªßa ch√≠nh n√≥
    const shouldRespond = (senderID !== idBot && (event.body?.toLowerCase().includes("qh") || isReplyToBot));

    if (shouldRespond) {
        if (isProcessing[threadID]) {
            // N·∫øu bot ƒëang x·ª≠ l√Ω ·ªü thread n√†y th√¨ b·ªè qua
            return api.sendMessage("Ch·ªù ch√∫t nha c·∫≠u, qh ƒëang b·∫≠n x·ª≠ l√Ω tin nh·∫Øn tr∆∞·ªõc ƒë√≥ r·ªìi! ‚è≥", threadID, event.messageID);
        }
        isProcessing[threadID] = true; // ƒê·∫∑t tr·∫°ng th√°i ƒëang x·ª≠ l√Ω

        const timeNow = getCurrentTimeInVietnam();
        const nameUser = (await api.getUserInfo(event.senderID))[event.senderID].name;

        try {
            const result = await CHAT.sendMessage(`{
                "time": "${timeNow}",\n"senderName": "${nameUser}",\n"content": "${event.body}",\n"threadID": "${event.threadID}",\n"senderID": "${event.senderID}",\n"id_cua_bot": "${idBot}"
            }`);
            const response = await result.response;
            const text = await response.text();
            let botMsg;
            try {
                // C·ªë g·∫Øng t√¨m block JSON tr∆∞·ªõc
                const jsonMatch = text.match(/```json\s*([\s\S]*?)\s*```/i); // Th√™m i ƒë·ªÉ kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
                if (jsonMatch) {
                    botMsg = JSON.parse(jsonMatch[1]);
                } else {
                    // N·∫øu kh√¥ng c√≥ block JSON, th·ª≠ parse c·∫£ ƒëo·∫°n text
                    botMsg = JSON.parse(text);
                }
            } catch (jsonError) {
                console.error("L·ªói khi ph√¢n t√≠ch JSON t·ª´ Gemini: ‚ùå", jsonError);
                api.sendMessage("qh h∆°i ng√°o t√≠, kh√¥ng hi·ªÉu ƒë∆∞·ª£c ph·∫£n h·ªìi c·ªßa Gemini. Th·ª≠ l·∫°i sau nh√©! ü§Ø", event.threadID, event.messageID);
                return; // Tho√°t kh·ªèi h√†m n·∫øu l·ªói JSON
            }

            if (botMsg.content && botMsg.content.text) {
                api.sendMessage({
                    body: `${botMsg.content.text}`,
                }, event.threadID, (err, data) => {
                    if (err) console.error("L·ªói khi g·ª≠i tin nh·∫Øn: üòî", err);
                }, event.messageID);
            } else {
                console.error("ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ Gemini: ü§∑‚Äç‚ôÄÔ∏è", botMsg);
                api.sendMessage("H·ªßh? qh ch∆∞a hi·ªÉu √Ω c·∫≠u l·∫Øm. C√≥ th·ªÉ h·ªèi r√µ h∆°n kh√¥ng? ü§î", event.threadID, event.messageID);
            }

            const {
                nhac,
                hanh_dong
            } = botMsg;
            if (nhac && nhac.status) {
                const keywordSearch = nhac.keyword;
                if (!keywordSearch) {
                    api.sendMessage("L·ªói khi x·ª≠ l√≠ √¢m thanh (kh√¥ng c√≥ t·ª´ kh√≥a). üé∂", threadID);
                    return;
                }

                try {
                    const dataaa = await searchSoundCloud(keywordSearch);

                    if (dataaa.length === 0) {
                        api.sendMessage(`‚ùé Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o v·ªõi t·ª´ kh√≥a "${keywordSearch}"`, threadID);
                        return;
                    }

                    const firstResult = dataaa[0];
                    const urlAudio = firstResult.url;
                    const dataPromise = await sclDownload(urlAudio);

                    setTimeout(async () => {
                        const audioURL = dataPromise.url;
                        const stream = (await axios.get(audioURL, {
                            responseType: 'arraybuffer'
                        })).data;
                        const filePath = __dirname + `/cache/${Date.now()}.mp3`;

                        fs.writeFileSync(filePath, Buffer.from(stream, 'binary'));

                        api.sendMessage({
                            body: `Nh·∫°c m√† b·∫°n y√™u c·∫ßu ƒë√¢y üé∂`,
                            attachment: fs.createReadStream(filePath)
                        }, threadID, () => {
                            setTimeout(() => {
                                fs.unlinkSync(filePath); // X√≥a file sau 2 ph√∫t
                            }, 2 * 60 * 1000);
                        });
                    }, 3000);
                } catch (err) {
                    console.error("L·ªói khi t√¨m ki·∫øm ho·∫∑c t·∫£i nh·∫°c: üéµ", err);
                    api.sendMessage("ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm nh·∫°c. qh xin l·ªói nha! üòì", threadID, event.messageID);
                }
            }
            if (hanh_dong) {
                if (hanh_dong.doi_biet_danh && hanh_dong.doi_biet_danh.status) {
                    api.changeNickname(
                        hanh_dong.doi_biet_danh.biet_danh_moi,
                        hanh_dong.doi_biet_danh.thread_id,
                        hanh_dong.doi_biet_danh.user_id
                    );
                }
                if (hanh_dong.doi_icon_box && hanh_dong.doi_icon_box.status) {
                    api.changeThreadEmoji(
                        hanh_dong.doi_icon_box.icon,
                        hanh_dong.doi_icon_box.thread_id
                    );
                }
                if (hanh_dong.doi_ten_nhom && hanh_dong.doi_ten_nhom.status) {
                    api.changeThreadName(
                        hanh_dong.doi_ten_nhom.ten_moi,
                        hanh_dong.doi_ten_nhom.thread_id
                    );
                }
                if (hanh_dong.kick_nguoi_dung && hanh_dong.kick_nguoi_dung.status) {
                    api.removeUserFromGroup(
                        hanh_dong.kick_nguoi_dung.user_id,
                        hanh_dong.kick_nguoi_dung.thread_id
                    );
                }
                if (hanh_dong.add_nguoi_dung && hanh_dong.add_nguoi_dung.status) {
                    api.addUserToGroup(
                        hanh_dong.add_nguoi_dung.user_id,
                        hanh_dong.add_nguoi_dung.thread_id
                    );
                }
            }
        } catch (apiError) {
            console.error("L·ªói khi giao ti·∫øp v·ªõi Gemini API: üö®", apiError);
            api.sendMessage("√îi, qh ƒëang c√≥ ch√∫t tr·ª•c tr·∫∑c v·ªõi n√£o b·ªô (API Gemini). C√≥ l·∫Ω do h·∫øt l∆∞·ª£t d√πng ho·∫∑c m·∫°ng lag, th·ª≠ l·∫°i sau nha! üòµ‚Äçüí´", event.threadID, event.messageID);
        } finally {
            isProcessing[threadID] = false; // Lu√¥n reset tr·∫°ng th√°i x·ª≠ l√Ω
        }
    }
};

module.exports.handleReply = async function({
    handleReply: $,
    api,
    Currencies,
    event,
    Users
}) {};
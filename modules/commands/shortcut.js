const fs = require('fs-extra'); // D√πng fs-extra cho ti·ªán
const path = require('path');
const axios = require('axios');
const moment = require("moment-timezone");

module.exports.config = {
    name: "shortcut",
    version: "2.0.0", // Phi√™n b·∫£n h·ª£p nh·∫•t v√† n√¢ng c·∫•p b·ªüi qh v√† Gemini
    hasPermssion: 0,
    credits: "Niiozic (mod by qh v√† Gemini) üëë", // Th√™m credit c·ªßa m√†y v√† tao
    description: "‚ö° T·∫°o ph√≠m t·∫Øt cho tin nh·∫Øn, h·ªó tr·ª£ tag, auto-send, welcome/goodbye v√† nhi·ªÅu bi·∫øn ƒë·ªông!", // M√¥ t·∫£ r√µ r√†ng, h·∫•p d·∫´n h∆°n
    commandCategory: "TI·ªÜN √çCH", // Chuy·ªÉn sang ti·ªán √≠ch
    usages: "[add/del/list/tag/join/leave/autosend/empty]\nC√°c bi·∫øn h·ªó tr·ª£:\n{time} -> Th·ªùi gian hi·ªán t·∫°i\n{name} -> T√™n ng∆∞·ªùi t∆∞∆°ng t√°c\n{nameThread} -> T√™n nh√≥m chat\n{soThanhVien} -> S·ªë th√†nh vi√™n trong nh√≥m\n{link} -> Link Facebook ng∆∞·ªùi t∆∞∆°ng t√°c\n{authorName} -> T√™n ng∆∞·ªùi add/kick/th·ª±c hi·ªán l·ªánh\n{authorId} -> Link Facebook ng∆∞·ªùi add/kick/th·ª±c hi·ªán l·ªánh\n{trangThai} -> T·ª± out hay b·ªã kick (khi out)\n{qtv} -> Tag t·∫•t c·∫£ QTV nh√≥m",
    cooldowns: 0,
    dependencies: {
        "fs-extra": "",
        "path": "",
        "axios": "",
        "moment-timezone": ""
    }
};

// H√†m ƒë·ªãnh d·∫°ng ph·∫ßn m·ªü r·ªông file ƒë√≠nh k√®m
const format_attachment = type => ({
    photo: 'png', video: 'mp4', audio: 'mp3', animated_image: 'gif',
})[type] || 'bin';

// H√†m stream URL v·ªÅ attachment
const stream_url = async (url) => {
    try {
        const response = await axios.get(url, { responseType: 'stream' });
        return response.data;
    } catch (e) {
        console.error("‚ö†Ô∏è L·ªói khi stream URL:", e);
        return null;
    }
};

// ƒê∆∞·ªùng d·∫´n file l∆∞u data shortcut (trong th∆∞ m·ª•c data c·ªßa commands)
const DATA_PATH = path.resolve(__dirname, '..', 'commands', 'data', "shortcutdata.json");

module.exports.onLoad = function({ api }) {
    if (!global.moduleData.shortcut) {
        global.moduleData.shortcut = new Map();
    }

    // ƒê·∫£m b·∫£o th∆∞ m·ª•c data t·ªìn t·∫°i
    fs.ensureDirSync(path.dirname(DATA_PATH));

    // Kh·ªüi t·∫°o file data n·∫øu ch∆∞a c√≥
    if (!fs.existsSync(DATA_PATH)) {
        fs.writeFileSync(DATA_PATH, JSON.stringify([], null, 4), "utf-8");
    }

    // Load data t·ª´ file v√†o global.moduleData.shortcut
    const data = JSON.parse(fs.readFileSync(DATA_PATH, "utf-8"));
    for (const threadData of data) {
        global.moduleData.shortcut.set(threadData.threadID, threadData.shortcuts);
    }

    // Interval cho auto-send (ch·ªâ ch·∫°y m·ªôt l·∫ßn duy nh·∫•t)
    if (!global.shortcutAutoSendInterval) {
        global.shortcutAutoSendInterval = setInterval(async function () {
            const now = moment().tz('Asia/Ho_Chi_Minh').format('HH:mm:ss');
            for (let [threadID, thread_data] of global.moduleData.shortcut) {
                for (let e of thread_data) {
                    if (e.input_type === 'autosend') {
                        if (e.hours === now) {
                            try {
                                const outputs = e.output.split('|'); // H·ªó tr·ª£ nhi·ªÅu output ngƒÉn c√°ch b·ªüi |
                                const output = outputs[Math.random() * outputs.length << 0]; // Ch·ªçn ng·∫´u nhi√™n
                                let msg = { body: output };

                                if (e.uri && e.uri !== 's') { // 's' nghƒ©a l√† kh√¥ng c√≥ attachment
                                    if (e.uri === 'random') {
                                        // C·∫ßn m·ªôt API link ng·∫´u nhi√™n ·ªü ƒë√¢y n·∫øu c√≥
                                        // T·∫°m th·ªùi b·ªè qua n·∫øu kh√¥ng c√≥ API cung c·∫•p
                                        console.warn("‚ö†Ô∏è [Shortcut] Auto-send v·ªõi 'random' attachment y√™u c·∫ßu API link. Vui l√≤ng c·∫•u h√¨nh.");
                                    } else if (/^https:\/\//.test(e.uri)) {
                                        const attachmentStream = await stream_url(e.uri);
                                        if (attachmentStream) {
                                            msg.attachment = [attachmentStream];
                                        }
                                    }
                                }
                                api.sendMessage(msg, threadID);
                            } catch (error) {
                                console.error(`‚ùå [Shortcut] L·ªói khi x·ª≠ l√Ω auto-send cho nh√≥m ${threadID}:`, error);
                            }
                        }
                    }
                }
            }
        }, 1000); // Ki·ªÉm tra m·ªói gi√¢y
    }
};

module.exports.handleEvent = async function({ event, api, Users }) {
    const { threadID, messageID, body, senderID, mentions: Mentions = {}, logMessageType, logMessageData, participantIDs, author } = event;
    
    // B·ªè qua tin nh·∫Øn c·ªßa ch√≠nh bot ƒë·ªÉ tr√°nh loop
    if (api.getCurrentUserID() === senderID) return;

    if (!global.moduleData.shortcut || !global.moduleData.shortcut.has(threadID)) return;

    const data = global.moduleData.shortcut.get(threadID);

    // X·ª≠ l√Ω c√°c event log (join/leave)
    if (logMessageType === 'log:subscribe' || logMessageType === 'log:unsubscribe') {
        const type = (logMessageType === 'log:subscribe') ? 'join' : 'leave';
        const shortcutEvent = data.find(e => e.input_type === type);

        if (!shortcutEvent) return;

        try {
            const thread_info = await api.getThreadInfo(threadID);
            const admins = thread_info.adminIDs.map(e => ({ id: e.id, name: global.data.userName.get(e.id) || "Admin" }));

            let outputText = shortcutEvent.output
                .replace(/{nameThread}/g, thread_info.threadName || "nh√≥m n√†y")
                .replace(/{soThanhVien}/g, thread_info.participantIDs?.length || 0)
                .replace(/{time}/g, moment().tz('Asia/Ho_Chi_Minh').format('HH:mm:ss | DD/MM/YYYY'));
            
            let mentions = [];
            let authorName = global.data.userName.get(author) || "M·ªôt th√†nh vi√™n";
            let authorId = `https://www.facebook.com/profile.php?id=${author}`;

            if (type === 'join') {
                const addedParticipants = logMessageData.addedParticipants || [];
                const participantNames = addedParticipants.map(e => e.fullName).join(', ');
                const participantLinks = addedParticipants.map(e => `https://www.facebook.com/profile.php?id=${e.userFbId}`).join('\n');
                
                outputText = outputText
                    .replace(/{name}/g, participantNames)
                    .replace(/{link}/g, participantLinks);
                
                addedParticipants.forEach(e => mentions.push({ id: e.userFbId, tag: e.fullName }));

            } else { // type === 'leave'
                const leftParticipantName = global.data.userName.get(logMessageData.leftParticipantFbId) || "m·ªôt ng∆∞·ªùi d√πng";
                const leftParticipantLink = `https://www.facebook.com/profile.php?id=${logMessageData.leftParticipantFbId}`;
                const trangThai = (logMessageData.leftParticipantFbId == author) ? `ƒë√£ t·ª± out kh·ªèi nh√≥m` : `ƒë√£ b·ªã kick kh·ªèi nh√≥m`;
                
                outputText = outputText
                    .replace(/{name}/g, leftParticipantName)
                    .replace(/{link}/g, leftParticipantLink)
                    .replace(/{trangThai}/g, trangThai);

                mentions.push({ id: logMessageData.leftParticipantFbId, tag: leftParticipantName });
            }

            outputText = outputText
                .replace(/{authorName}/g, authorName)
                .replace(/{authorId}/g, authorId);
            
            if (/{qtv}/g.test(outputText)) {
                const qtvTags = admins.map(admin => `@${admin.name}`).join('\n');
                outputText = outputText.replace(/{qtv}/g, qtvTags);
                admins.forEach(admin => mentions.push({ id: admin.id, tag: admin.name }));
            }

            let msg = { body: outputText, mentions: mentions.filter((v, i, a) => a.findIndex(t => (t.id === v.id)) === i) }; // L·ªçc tr√πng l·∫∑p mentions

            if (shortcutEvent.uri && shortcutEvent.uri !== 's') {
                if (shortcutEvent.uri === 'random') {
                    // C·∫ßn m·ªôt API link ng·∫´u nhi√™n ·ªü ƒë√¢y n·∫øu c√≥
                    console.warn("‚ö†Ô∏è [Shortcut] Event join/leave v·ªõi 'random' attachment y√™u c·∫ßu API link. Vui l√≤ng c·∫•u h√¨nh.");
                } else if (/^https:\/\//.test(shortcutEvent.uri)) {
                    const attachmentStream = await stream_url(shortcutEvent.uri);
                    if (attachmentStream) {
                        msg.attachment = [attachmentStream];
                    }
                }
            }
            api.sendMessage(msg, threadID);

        } catch (error) {
            console.error(`‚ùå [Shortcut] L·ªói x·ª≠ l√Ω event ${type} cho nh√≥m ${threadID}:`, error);
        }
        return; // ƒê√£ x·ª≠ l√Ω event log, kh√¥ng c·∫ßn ki·ªÉm tra tin nh·∫Øn th∆∞·ªùng
    }

    // X·ª≠ l√Ω tin nh·∫Øn th∆∞·ªùng v√† tag
    if (!body) return;

    // L·ªçc b·ªè c√°c shortcut kh√¥ng ph·∫£i l√† text/tag (v√≠ d·ª•: autosend, join, leave)
    const filteredData = data.filter(item => !['autosend', 'join', 'leave'].includes(item.input_type));

    let dataThread;
    const lowerCaseBody = body.toLowerCase();
    const mentionIDs = Object.keys(Mentions);

    if (mentionIDs.length > 0) {
        dataThread = filteredData.find(item => typeof item.tag_id === 'string' && mentionIDs.includes(item.tag_id));
    }
    
    if (!dataThread) {
        dataThread = filteredData.find(item => (item.input || '').toLowerCase() === lowerCaseBody);
    }
    
    if (dataThread) {
        try {
            let output = dataThread.output;
            const userName = global.data.userName.get(senderID) || await Users.getNameUser(senderID);
            const currentTime = moment().tz("Asia/Ho_Chi_Minh").format('HH:mm:ss | DD/MM/YYYY');

            if (output) {
                output = output
                    .replace(/\{name}/g, userName)
                    .replace(/\{time}/g, currentTime);
            }

            let msg = { body: output };

            if (dataThread.uri && dataThread.uri !== 's') {
                if (dataThread.uri === 'random') {
                     // C·∫ßn m·ªôt API link ng·∫´u nhi√™n ·ªü ƒë√¢y n·∫øu c√≥
                    console.warn("‚ö†Ô∏è [Shortcut] Ph·∫£n h·ªìi tin nh·∫Øn v·ªõi 'random' attachment y√™u c·∫ßu API link. Vui l√≤ng c·∫•u h√¨nh.");
                } else if (/^https:\/\//.test(dataThread.uri)) {
                    const attachmentStream = await stream_url(dataThread.uri);
                    if (attachmentStream) {
                        msg.attachment = [attachmentStream];
                    }
                }
            }
            return api.sendMessage(msg, threadID, messageID);
        } catch (error) {
            console.error("‚ùå [Shortcut] L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi shortcut:", error);
            api.sendMessage("üö® ƒê√£ x·∫£y ra l·ªói khi bot c·ªë g·∫Øng ph·∫£n h·ªìi shortcut n√†y. Vui l√≤ng th·ª≠ l·∫°i!", threadID, messageID);
        }
    }
};

module.exports.handleReply = async function({ event = {}, api, handleReply }) {
    if (handleReply.author !== event.senderID) return; // Ch·ªâ ng∆∞·ªùi kh·ªüi t·∫°o m·ªõi c√≥ th·ªÉ reply

    try {
        const { threadID, messageID, senderID, body, attachments = [] } = event;
        const name = this.config.name;

        // ƒê·∫£m b·∫£o file data t·ªìn t·∫°i v√† ƒë·ªçc d·ªØ li·ªáu
        const readData = fs.readFileSync(DATA_PATH, "utf-8");
        let data = JSON.parse(readData);
        let threadData = data.find(item => item.threadID === threadID) || { threadID, shortcuts: [] };
        let globalShortcutData = global.moduleData.shortcut.get(threadID) || [];

        api.unsendMessage(handleReply.messageID); // X√≥a tin nh·∫Øn handleReply c≈©

        switch (handleReply.type) {
            case "requireInput": {
                if (!body || body.trim().length === 0) {
                    return api.sendMessage("‚ö†Ô∏è T·ª´ kh√≥a kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", threadID, messageID);
                }
                if (threadData.shortcuts.some(item => item.input && item.input.toLowerCase() === body.toLowerCase())) {
                    return api.sendMessage("‚ùé T·ª´ kh√≥a n√†y ƒë√£ t·ªìn t·∫°i trong nh√≥m r·ªìi!", threadID, messageID);
                }
                api.sendMessage("üìå Tuy·ªát! Gi·ªù h√£y reply tin nh·∫Øn n√†y v·ªõi **c√¢u tr·∫£ l·ªùi** b·∫°n mu·ªën bot ph·∫£n h·ªìi khi t·ª´ kh√≥a ƒë∆∞·ª£c d√πng:", threadID, (error, info) => {
                    global.client.handleReply.push({
                        type: "requireOutput",
                        name,
                        author: senderID,
                        messageID: info.messageID,
                        input: body.trim(),
                        input_type: 'text' // X√°c ƒë·ªãnh ƒë√¢y l√† shortcut d·∫°ng text
                    });
                }, messageID);
                break;
            }
            case "requireOutput": {
                if (!body || body.trim().length === 0) {
                    return api.sendMessage("‚ö†Ô∏è C√¢u tr·∫£ l·ªùi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", threadID, messageID);
                }
                api.sendMessage(`üìå G·∫ßn xong r·ªìi! Gi·ªù reply tin nh·∫Øn n√†y v·ªõi **t·ªáp ƒë√≠nh k√®m** (·∫£nh/video/mp3/gif) ho·∫∑c:\n- Nh·∫≠p **'s'** n·∫øu kh√¥ng c·∫ßn t·ªáp.\n- Nh·∫≠p **'random'** n·∫øu mu·ªën s·ª≠ d·ª•ng ·∫£nh/video ng·∫´u nhi√™n t·ª´ API (n·∫øu c√≥ c·∫•u h√¨nh).`, threadID, (error, info) => {
                    global.client.handleReply.push({
                        type: "requireAttachment", // ƒê·ªïi t√™n case cho r√µ r√†ng h∆°n
                        name,
                        author: senderID,
                        messageID: info.messageID,
                        input: handleReply.input,
                        output: body,
                        input_type: handleReply.input_type,
                        tag_id: handleReply.tag_id,
                        hours: handleReply.hours // Gi·ªØ l·∫°i cho autosend
                    });
                }, messageID);
                break;
            }
            case "requireAttachment": { // Case m·ªõi cho vi·ªác y√™u c·∫ßu file ƒë√≠nh k√®m
                let uri = '';
                if (body.toLowerCase() === 's') {
                    uri = 's'; // Ng∆∞·ªùi d√πng ch·ªçn kh√¥ng c√≥ attachment
                } else if (body.toLowerCase() === 'random') {
                    uri = 'random'; // Ng∆∞·ªùi d√πng ch·ªçn attachment ng·∫´u nhi√™n
                } else if (attachments.length === 0) {
                    return api.sendMessage('‚ö†Ô∏è B·∫°n ch∆∞a cung c·∫•p t·ªáp ƒë√≠nh k√®m ho·∫∑c l·ª±a ch·ªçn h·ª£p l·ªá ("s" / "random")!', threadID, messageID);
                } else {
                    const attachment = attachments[0];
                    const fileExtension = format_attachment(attachment.type);
                    try {
                        uri = await uploadToCatbox(attachment.url, fileExtension); // Upload l√™n Catbox
                        if (!uri) {
                            return api.sendMessage('‚ùå Kh√¥ng th·ªÉ upload t·ªáp ƒë√≠nh k√®m l√™n server! Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ch·ªçn "s".', threadID, messageID);
                        }
                    } catch (e) {
                        console.error("‚ùå L·ªói khi upload t·ªáp ƒë√≠nh k√®m:", e);
                        return api.sendMessage('‚ùå ƒê√£ x·∫£y ra l·ªói khi upload t·ªáp ƒë√≠nh k√®m! Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ch·ªçn "s".', threadID, messageID);
                    }
                }

                const newShortcut = {
                    input: handleReply.input,
                    output: handleReply.output,
                    uri: uri === 's' ? null : uri, // L∆∞u null n·∫øu ng∆∞·ªùi d√πng ch·ªçn 's'
                    input_type: handleReply.input_type,
                    tag_id: handleReply.tag_id,
                    hours: handleReply.hours // D√†nh cho autosend
                };

                // Ki·ªÉm tra v√† lo·∫°i b·ªè shortcut c≈© n·∫øu ƒëang c·∫≠p nh·∫≠t
                if (handleReply.input_type === 'join' || handleReply.input_type === 'leave' || handleReply.input_type === 'autosend') {
                    threadData.shortcuts = threadData.shortcuts.filter(
                        s => s.input_type !== handleReply.input_type || (s.input_type === 'autosend' && s.hours !== handleReply.hours)
                    );
                    globalShortcutData = globalShortcutData.filter(
                        s => s.input_type !== handleReply.input_type || (s.input_type === 'autosend' && s.hours !== handleReply.hours)
                    );
                }

                threadData.shortcuts.push(newShortcut);
                globalShortcutData.push(newShortcut);

                if (!data.some(item => item.threadID === threadID)) {
                    data.push(threadData);
                } else {
                    const index = data.findIndex(item => item.threadID === threadID);
                    data[index] = threadData;
                }

                global.moduleData.shortcut.set(threadID, globalShortcutData);
                fs.writeFileSync(DATA_PATH, JSON.stringify(data, null, 4), "utf-8");

                let successMsg = `‚úÖ ƒê√£ th√™m th√†nh c√¥ng shortcut m·ªõi! ‚ú®\n\n`;
                successMsg += `- **Lo·∫°i:** ${newShortcut.input_type || 'text'}\n`;
                if (newShortcut.input) successMsg += `- **T·ª´ kh√≥a:** ${newShortcut.input}\n`;
                if (newShortcut.tag_id) successMsg += `- **Tag ID:** ${newShortcut.tag_id} (${global.data.userName.get(newShortcut.tag_id) || 'Kh√¥ng r√µ t√™n'})\n`;
                if (newShortcut.hours) successMsg += `- **Gi·ªù g·ª≠i t·ª± ƒë·ªông:** ${newShortcut.hours}\n`;
                successMsg += `- **Ph·∫£n h·ªìi:** ${newShortcut.output}\n`;
                successMsg += `- **ƒê√≠nh k√®m:** ${newShortcut.uri ? (newShortcut.uri === 'random' ? 'Ng·∫´u nhi√™n t·ª´ API' : 'C√≥') : 'Kh√¥ng'}`;

                return api.sendMessage(successMsg, threadID, messageID);
            }
            case "delShortcut": {
                const inputNumbers = event.args.map(Number).filter(n => Number.isInteger(n) && n > 0);
                if (inputNumbers.length === 0) {
                    return api.sendMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± c·ªßa shortcut b·∫°n mu·ªën x√≥a!", threadID, messageID);
                }

                let deletedItemsInfo = [];
                let shortcutsToKeep = [];
                let originalShortcuts = [...globalShortcutData]; // T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh thay ƒë·ªïi khi l·∫∑p

                for (let i = 0; i < originalShortcuts.length; i++) {
                    if (inputNumbers.includes(i + 1)) { // So s√°nh v·ªõi STT m√† ng∆∞·ªùi d√πng nh·∫≠p
                        const deletedItem = originalShortcuts[i];
                        if (deletedItem) {
                            let displayName = '';
                            if (deletedItem.input_type === 'tag') {
                                displayName = `@${global.data.userName.get(deletedItem.tag_id) || deletedItem.tag_id}`;
                            } else if (deletedItem.input_type === 'autosend') {
                                displayName = `T·ª± ƒë·ªông g·ª≠i l√∫c ${deletedItem.hours}`;
                            } else if (deletedItem.input_type === 'join') {
                                displayName = `Tin nh·∫Øn ch√†o th√†nh vi√™n m·ªõi`;
                            } else if (deletedItem.input_type === 'leave') {
                                displayName = `Tin nh·∫Øn t·∫°m bi·ªát th√†nh vi√™n`;
                            } else {
                                displayName = deletedItem.input;
                            }
                            deletedItemsInfo.push(`${i + 1}. **${displayName}**`);
                        }
                    } else {
                        shortcutsToKeep.push(originalShortcuts[i]);
                    }
                }

                if (deletedItemsInfo.length === 0) {
                    return api.sendMessage("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y shortcut n√†o v·ªõi s·ªë th·ª© t·ª± ƒë√£ nh·∫≠p ƒë·ªÉ x√≥a.", threadID, messageID);
                }

                threadData.shortcuts = shortcutsToKeep;
                global.moduleData.shortcut.set(threadID, shortcutsToKeep);

                // C·∫≠p nh·∫≠t l·∫°i file data.json
                const dataIndex = data.findIndex(item => item.threadID === threadID);
                if (dataIndex !== -1) {
                    data[dataIndex] = threadData;
                } else {
                    // N·∫øu v√¨ l√Ω do n√†o ƒë√≥ kh√¥ng t√¨m th·∫•y threadID, c√≥ th·ªÉ th√™m v√†o ho·∫∑c b·ªè qua
                    // Trong tr∆∞·ªùng h·ª£p n√†y, ta gi·∫£ ƒë·ªãnh lu√¥n t√¨m th·∫•y n·∫øu c√≥ shortcut trong thread ƒë√≥
                }
                fs.writeFileSync(DATA_PATH, JSON.stringify(data, null, 4));

                return api.sendMessage(`‚úÖ ƒê√£ x√≥a th√†nh c√¥ng c√°c shortcut sau:\n\n${deletedItemsInfo.join('\n')}`, threadID);
            }
            // C√°c case handleReply kh√°c c√≥ th·ªÉ ƒë∆∞·ª£c th√™m v√†o ƒë√¢y
        }
    } catch (e) {
        console.error("‚ùå [Shortcut] L·ªói trong handleReply:", e);
        api.sendMessage("üö® ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng khi x·ª≠ l√Ω ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i!", threadID, messageID);
    }
};

module.exports.run = async function({ event, api, args }) {
    try {
        const { threadID, messageID, senderID, mentions = {} } = event;
        const command = args[0] ? args[0].toLowerCase() : '';
        const name = this.config.name;

        // ƒê·∫£m b·∫£o th∆∞ m·ª•c data v√† file data.json t·ªìn t·∫°i
        fs.ensureDirSync(path.dirname(DATA_PATH));
        if (!fs.existsSync(DATA_PATH)) {
            fs.writeFileSync(DATA_PATH, JSON.stringify([], null, 4), "utf-8");
        }

        let data = JSON.parse(fs.readFileSync(DATA_PATH, "utf-8"));
        let threadData = data.find(item => item.threadID === threadID) || { threadID, shortcuts: [] };
        
        switch (command) {
            case "add":
            case "-a": {
                return api.sendMessage("üìå Reply tin nh·∫Øn n√†y ƒë·ªÉ nh·∫≠p **t·ª´ kh√≥a** cho shortcut m·ªõi c·ªßa b·∫°n:", threadID, (error, info) => {
                    global.client.handleReply.push({
                        type: "requireInput",
                        name,
                        author: senderID,
                        messageID: info.messageID
                    });
                }, messageID);
            }
            case "remove":
            case "delete":
            case "del":
            case "-d": {
                const shortcutsInThread = global.moduleData.shortcut.get(threadID);
                if (!shortcutsInThread || shortcutsInThread.length === 0) {
                    return api.sendMessage("‚ùé Nh√≥m c·ªßa b·∫°n hi·ªán ch∆∞a c√≥ shortcut n√†o ƒë·ªÉ x√≥a.", threadID, messageID);
                }
                
                let listMsg = "üìù D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c shortcut hi·ªán c√≥:\n\n";
                shortcutsInThread.forEach((shortcut, index) => {
                    let displayName = '';
                    if (shortcut.input_type === 'tag') {
                        displayName = `TAG: @${global.data.userName.get(shortcut.tag_id) || shortcut.tag_id}`;
                    } else if (shortcut.input_type === 'autosend') {
                        displayName = `AUTO-SEND: ${shortcut.hours}`;
                    } else if (shortcut.input_type === 'join') {
                        displayName = `WELCOME`;
                    } else if (shortcut.input_type === 'leave') {
                        displayName = `GOODBYE`;
                    } else {
                        displayName = `T·ª™ KH√ìA: ${shortcut.input}`;
                    }
                    listMsg += `${index + 1}. ${displayName} -> "${shortcut.output}"\n`;
                });
                listMsg += `\n**Reply tin nh·∫Øn n√†y** v·ªõi s·ªë th·ª© t·ª± c·ªßa shortcut b·∫°n mu·ªën x√≥a (c√≥ th·ªÉ x√≥a nhi·ªÅu b·∫±ng c√°ch c√°ch nhau b·ªüi d·∫•u c√°ch).`;
                
                return api.sendMessage(listMsg, threadID, (error, info) => {
                    global.client.handleReply.push({
                        type: "delShortcut",
                        name,
                        author: senderID,
                        messageID: info.messageID
                    });
                }, messageID);
            }
            case "list":
            case "all":
            case "-l": {
                const shortcutsInThread = global.moduleData.shortcut.get(threadID);
                if (!shortcutsInThread || shortcutsInThread.length === 0) {
                    return api.sendMessage("‚ùé Nh√≥m c·ªßa b·∫°n hi·ªán ch∆∞a c√≥ shortcut n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p.", threadID, messageID);
                }
                let listMsg = "üìù Danh s√°ch c√°c shortcut ƒëang ho·∫°t ƒë·ªông trong nh√≥m:\n\n";
                shortcutsInThread.forEach((shortcut, index) => {
                    let typeDisplay = '';
                    let inputDisplay = '';
                    switch (shortcut.input_type) {
                        case 'tag':
                            typeDisplay = 'TAG';
                            inputDisplay = `@${global.data.userName.get(shortcut.tag_id) || shortcut.tag_id}`;
                            break;
                        case 'autosend':
                            typeDisplay = 'AUTO-SEND';
                            inputDisplay = `l√∫c ${shortcut.hours}`;
                            break;
                        case 'join':
                            typeDisplay = 'WELCOME';
                            inputDisplay = 'khi c√≥ th√†nh vi√™n m·ªõi';
                            break;
                        case 'leave':
                            typeDisplay = 'GOODBYE';
                            inputDisplay = 'khi c√≥ th√†nh vi√™n r·ªùi nh√≥m';
                            break;
                        default:
                            typeDisplay = 'TEXT';
                            inputDisplay = `"${shortcut.input}"`;
                            break;
                    }
                    const hasAttachment = shortcut.uri && shortcut.uri !== 's' ? ' (C√≥ ƒë√≠nh k√®m)' : '';
                    listMsg += `${index + 1}. [${typeDisplay}] ${inputDisplay} -> "${shortcut.output}"${hasAttachment}\n`;
                });
                listMsg += "\n**Ghi ch√∫:** 'C√≥ ƒë√≠nh k√®m' nghƒ©a l√† shortcut c√≥ file ·∫£nh/video/√¢m thanh.\n**Reply (ph·∫£n h·ªìi) tin nh·∫Øn n√†y k√®m STT** ƒë·ªÉ x√≥a shortcut.";

                return api.sendMessage(listMsg, threadID, (error, info) => {
                    global.client.handleReply.push({
                        type: "delShortcut",
                        name,
                        author: senderID,
                        messageID: info.messageID
                    });
                });
            }
            case "tag": {
                const targetID = Object.keys(mentions)[0] || senderID; // N·∫øu kh√¥ng tag ai th√¨ l·∫•y senderID
                const taggedName = global.data.userName.get(targetID) || "Ng∆∞·ªùi d√πng kh√¥ng x√°c ƒë·ªãnh";

                const shortcutsInThread = global.moduleData.shortcut.get(threadID) || [];
                if (shortcutsInThread.some(item => item.tag_id === targetID)) {
                    return api.sendMessage(`‚ùé Shortcut tag cho **${taggedName}** ƒë√£ t·ªìn t·∫°i trong nh√≥m r·ªìi!`, threadID, messageID);
                }

                api.sendMessage(`üìå Tuy·ªát! Gi·ªù h√£y reply tin nh·∫Øn n√†y v·ªõi **c√¢u tr·∫£ l·ªùi** b·∫°n mu·ªën bot ph·∫£n h·ªìi khi **${taggedName}** ƒë∆∞·ª£c tag:`, threadID, (error, info) => {
                    global.client.handleReply.push({
                        type: "requireOutput",
                        name,
                        author: senderID,
                        messageID: info.messageID,
                        input_type: 'tag',
                        tag_id: targetID
                    });
                }, messageID);
                break;
            }
            case "join": {
                const shortcutsInThread = global.moduleData.shortcut.get(threadID) || [];
                if (shortcutsInThread.some(item => item.input_type === 'join')) {
                    return api.sendMessage("‚ùé Nh√≥m n√†y ƒë√£ c√≥ tin nh·∫Øn ch√†o th√†nh vi√™n m·ªõi r·ªìi! N·∫øu mu·ªën thay ƒë·ªïi, h√£y x√≥a c√°i c≈© tr∆∞·ªõc.", threadID, messageID);
                }
                api.sendMessage("üìå H√£y reply tin nh·∫Øn n√†y v·ªõi **n·ªôi dung ch√†o m·ª´ng** th√†nh vi√™n m·ªõi. B·∫°n c√≥ th·ªÉ d√πng c√°c bi·∫øn {name}, {link}, {nameThread}, {soThanhVien}, {authorName}, {authorId}, {qtv}, {time}.", threadID, (err, info) => {
                    global.client.handleReply.push({
                        type: "requireOutput",
                        name: this.config.name,
                        author: senderID,
                        messageID: info.messageID,
                        input_type: 'join',
                    });
                }, messageID);
                break;
            }
            case "leave": {
                const shortcutsInThread = global.moduleData.shortcut.get(threadID) || [];
                if (shortcutsInThread.some(item => item.input_type === 'leave')) {
                    return api.sendMessage("‚ùé Nh√≥m n√†y ƒë√£ c√≥ tin nh·∫Øn t·∫°m bi·ªát th√†nh vi√™n r·ªìi! N·∫øu mu·ªën thay ƒë·ªïi, h√£y x√≥a c√°i c≈© tr∆∞·ªõc.", threadID, messageID);
                }
                api.sendMessage("üìå H√£y reply tin nh·∫Øn n√†y v·ªõi **n·ªôi dung t·∫°m bi·ªát** th√†nh vi√™n r·ªùi nh√≥m. B·∫°n c√≥ th·ªÉ d√πng c√°c bi·∫øn {name}, {link}, {nameThread}, {soThanhVien}, {authorName}, {authorId}, {trangThai}, {qtv}, {time}.", threadID, (err, info) => {
                    global.client.handleReply.push({
                        type: "requireOutput",
                        name: this.config.name,
                        author: senderID,
                        messageID: info.messageID,
                        input_type: 'leave',
                    });
                }, messageID);
                break;
            }
            case "autosend": {
                api.sendMessage("üìå Tuy·ªát v·ªùi! Gi·ªù h√£y reply tin nh·∫Øn n√†y v·ªõi **n·ªôi dung** b·∫°n mu·ªën bot t·ª± ƒë·ªông g·ª≠i ƒë·ªãnh k·ª≥. B·∫°n c√≥ th·ªÉ d√πng c√°c bi·∫øn {name}, {time} (l∆∞u √Ω: c√°c bi·∫øn kh√°c nh∆∞ {nameThread}, {soThanhVien}... c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c trong context t·ª± ƒë·ªông g·ª≠i).", threadID, (err, data) => {
                    global.client.handleReply.push({
                        ...data,
                        author: senderID,
                        name: exports.config.name,
                        type: 'autosend.input_content', // ƒê·ªïi t√™n cho r√µ r√†ng
                    });
                }, messageID);
                break;
            }
            case "autosend.input_content": { // Case m·ªõi cho n·ªôi dung autosend (t·ª´ handleReply)
                // Logic n√†y s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong handleReply
                break;
            }
            case "autosend.input_time": { // Case m·ªõi cho th·ªùi gian autosend (t·ª´ handleReply)
                // Logic n√†y s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong handleReply
                break;
            }
            case "empty": {
                if (args[1] === "confirm") {
                    threadData.shortcuts = [];
                    global.moduleData.shortcut.set(threadID, []);

                    const dataIndex = data.findIndex(item => item.threadID === threadID);
                    if (dataIndex !== -1) {
                        data.splice(dataIndex, 1); // X√≥a to√†n b·ªô d·ªØ li·ªáu c·ªßa thread n√†y
                    }
                    fs.writeFileSync(DATA_PATH, JSON.stringify(data, null, 4), "utf-8");
                    return api.sendMessage("üóëÔ∏è ƒê√£ x√≥a **t·∫•t c·∫£** shortcut trong nh√≥m n√†y!", threadID, messageID);
                } else {
                    return api.sendMessage("‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a **t·∫•t c·∫£** shortcut trong nh√≥m n√†y kh√¥ng? L·ªánh n√†y kh√¥ng th·ªÉ ho√†n t√°c!\nN·∫øu ch·∫Øc ch·∫Øn, h√£y d√πng: `-shortcut empty confirm`", threadID, messageID);
                }
            }
            default: {
                api.sendMessage("üìå B·∫°n mu·ªën t·∫°o shortcut cho **t·ª´ kh√≥a** n√†o? H√£y reply tin nh·∫Øn n√†y ƒë·ªÉ nh·∫≠p t·ª´ kh√≥a:", threadID, (error, info) => {
                    global.client.handleReply.push({
                        type: "requireInput",
                        name,
                        author: senderID,
                        messageID: info.messageID
                    });
                }, messageID);
            }
        }
    } catch (e) {
        console.error("‚ùå [Shortcut] L·ªói trong h√†m run:", e);
        api.sendMessage("üö® ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh shortcut. Vui l√≤ng th·ª≠ l·∫°i!", threadID, messageID);
    }
};

// H√†m upload l√™n Catbox (thay th·∫ø imgurUpload n·∫øu c·∫ßn)
async function uploadToCatbox(url, fileExtension) {
    try {
        const response = await axios({
            method: 'get',
            url: url,
            responseType: 'arraybuffer'
        });

        const formData = new FormData();
        formData.append('reqtype', 'fileupload');
        formData.append('fileToUpload', Buffer.from(response.data), `file.${fileExtension}`);

        const uploadResponse = await axios.post('https://catbox.moe/useruploads.php', formData, {
            headers: formData.getHeaders ? formData.getHeaders() : { 'Content-Type': `multipart/form-data; boundary=${formData._boundary}` }
        });

        if (uploadResponse.data && uploadResponse.data.startsWith('https://')) {
            return uploadResponse.data;
        } else {
            console.error("Catbox upload failed:", uploadResponse.data);
            return null;
        }
    } catch (e) {
        console.error("Error uploading to Catbox:", e);
        return null;
    }
}
module.exports.config = {
name: "help",
version: "1.0.0",
hasPermssion: 0,
credits: "Mirai",
description: "H∆∞·ªõng d·∫´n cho ng∆∞·ªùi m·ªõi",
commandCategory: "Danh s√°ch l·ªánh",
usages: "[T√™n module]",
cooldowns: 5,
envConfig: {
autoUnsend: true,
delayUnsend: 60
}
};

module.exports.languages = {
"vi": {
"moduleInfo": "‚ïî‚ïê.‚úæ.‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n‚ïë  %1\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê.‚úæ.‚ïê‚ïù \nüìù M√¥ t·∫£: %2\n\n‚öôÔ∏è Credit: %7\nüí° H∆∞·ªõng d·∫´n c√°ch d√πng: %3\nüìö Thu·ªôc nh√≥m: %4\n‚è± Th·ªùi gian ch·ªù: %5 gi√¢y\nüë• Quy·ªÅn h·∫°n: %6\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüëë ƒêi·ªÅu H√†nh B·ªüi qh üëë", // ƒê√£ s·ª≠a khung theo y√™u c·∫ßu
"helpList": '‚ú® --- Danh s√°ch l·ªánh ---\n Hi·ªán t·∫°i c√≥ %1 l·ªánh c√≥ th·ªÉ s·ª≠ d·ª•ng tr√™n bot n√†y.\n S·ª≠ d·ª•ng: "%2help + t√™n l·ªánh" ƒë·ªÉ bi·∫øt c√°ch s·ª≠ d·ª•ng chi ti·∫øt.\nü§ñ Bot ƒë∆∞·ª£c ƒëi·ªÅu h√†nh b·ªüi qh.\n\nüìñ ƒê√¢y l√† to√†n b·ªô l·ªánh c√≥ trong file bot.\n‚ùóÔ∏è Vui l√≤ng kh√¥ng spam ho·∫∑c ch·ª≠i bot d∆∞·ªõi b·∫•t k·ª≥ h√¨nh th·ª©c n√†o nh√©!\n‚è≥ Help s·∫Ω t·ª± ƒë·ªông g·ª° sau 60 gi√¢y.\n----------------------',
"user": "Ng∆∞·ªùi d√πng",
"adminGroup": "Qu·∫£n tr·ªã vi√™n nh√≥m",
"adminBot": "Qu·∫£n tr·ªã vi√™n bot"
},
"en": {
"moduleInfo": "„Äå %1 „Äç\n%2\n\n‚ùØ Usage: %3\n‚ùØ Category: %4\n‚ùØ Waiting time: %5 seconds(s)\n‚ùØ Permission: %6\n\n¬ª Module code by %7 ¬´",
"helpList": '[ There are %1 commands on this bot, Use: "%2help nameCommand" to know how to use! ]',
"user": "User",
"adminGroup": "Admin group",
"adminBot": "Admin bot"
}
};

module.exports.handleEvent = function ({ api, event, getText }) {
const { commands } = global.client;
const { threadID, messageID, body } = event;

if (!body || typeof body == "undefined" || body.indexOf("help") != 0) return;
const splitBody = body.slice(body.indexOf("help")).trim().split(/\s+/);
if (splitBody.length == 1 || !commands.has(splitBody[1].toLowerCase())) return;
const threadSetting = global.data.threadData.get(parseInt(threadID)) || {};
const command = commands.get(splitBody[1].toLowerCase());
const prefix = (threadSetting.hasOwnProperty("PREFIX")) ? threadSetting.PREFIX : global.config.PREFIX;
return api.sendMessage(getText("moduleInfo", command.config.name, command.config.description, `${prefix}${command.config.name} ${(command.config.usages) ? command.config.usages : ""}`, command.config.commandCategory, command.config.cooldowns, ((command.config.hasPermssion == 0) ? getText("user") : (command.config.hasPermssion == 1) ? getText("adminGroup") : getText("adminBot")), command.config.credits), threadID, messageID);
}

module.exports.run = function({ api, event, args, getText }) {
const { commands } = global.client;
const { threadID, messageID } = event;
const command = commands.get((args[0] || "").toLowerCase());
const threadSetting = global.data.threadData.get(parseInt(threadID)) || {};
const { autoUnsend, delayUnsend } = global.configModule[this.config.name];
const prefix = (threadSetting.hasOwnProperty("PREFIX")) ? threadSetting.PREFIX : global.config.PREFIX;

if (!command) {
const arrayInfo = [];
const page = parseInt(args[0]) || 1;
const numberOfOnePage = 10;
let i = 0;
let msg = "--- üìú Danh s√°ch l·ªánh ---\n";

for (var [name, value] of (commands)) {
name += `\n- üìö Nh√≥m: ${value.config.commandCategory}\n- üìå M√¥ t·∫£: ${value.config.description}\n- ‚è± Ch·ªù: ${value.config.cooldowns} gi√¢y`;
arrayInfo.push(name);
}

arrayInfo.sort((a, b) => a.data - b.data);

const startSlice = numberOfOnePage*page - numberOfOnePage;
i = startSlice;
const returnArray = arrayInfo.slice(startSlice, startSlice + numberOfOnePage);

for (let item of returnArray) msg += `[${++i}] ${item}\n\n`;
const text = `--- üìÑ Trang (${page}/${Math.ceil(arrayInfo.length/numberOfOnePage)}) ---\n‚ú® T·ªïng s·ªë l·ªánh: ${arrayInfo.length}\nüí° S·ª≠ d·ª•ng: "${prefix}help <t√™n l·ªánh>" ƒë·ªÉ bi·∫øt chi ti·∫øt.\n‚û°Ô∏è S·ª≠ d·ª•ng: "${prefix}help <s·ªë trang>" ƒë·ªÉ xem trang kh√°c.`;
return api.sendMessage(msg + text, threadID, async (error, info) => {
if (autoUnsend) {
await new Promise(resolve => setTimeout(resolve, delayUnsend * 60000));
return api.unsendMessage(info.messageID);
} else return;
});
}

return api.sendMessage(getText("moduleInfo", command.config.name, command.config.description, `${prefix}${command.config.name} ${(command.config.usages) ? command.config.usages : ""}`, command.config.commandCategory, command.config.cooldowns, ((command.config.hasPermssion == 0) ? getText("user") : (command.config.hasPermssion == 1) ? getText("adminGroup") : getText("adminBot")), command.config.credits), threadID, messageID);
};
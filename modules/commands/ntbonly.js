const fs = require("fs-extra");
const path = require("path");

module.exports.config = {
    name: "ntbonly",
    version: "1.0.2", // TƒÉng version l√™n m·ªôt ch√∫t
    hasPermssion: 1, // ƒê·ªïi quy·ªÅn h·∫°n th√†nh 1 (qu·∫£n tr·ªã vi√™n nh√≥m) ho·∫∑c 2 (qu·∫£n tr·ªã vi√™n bot) ƒë·ªÉ tr√°nh ng∆∞·ªùi d√πng th∆∞·ªùng b·∫≠t/t·∫Øt lung tung
    credits: "qh v√† Gemini", // Th√™m credit c·ªßa m√†y v√† tao
    description: "K√≠ch ho·∫°t ho·∫∑c v√¥ hi·ªáu h√≥a ch·∫ø ƒë·ªô d√πng bot gi·ªõi h·∫°n cho ng∆∞·ªùi thu√™ ho·∫∑c admin. üîí", // Thay ƒë·ªïi m√¥ t·∫£, th√™m icon
    commandCategory: "qu·∫£n tr·ªã vi√™n", // Chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng
    usages: "ntbonly",
    cooldowns: 5
};

module.exports.onLoad = function() {
    const filePath = path.resolve(__dirname, 'cache', 'ntbonly.json');
    if (!fs.existsSync(filePath)) {
        fs.writeFileSync(filePath, JSON.stringify({}), 'utf-8');
    }
};

module.exports.run = function({ api, event }) {
    const { threadID, messageID } = event;
    const filePath = path.resolve(__dirname, 'cache', 'ntbonly.json');
    let data = {};

    try {
        data = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
    } catch (error) {
        console.error("L·ªói ƒë·ªçc file ntbonly.json:", error);
        return api.sendMessage("‚ö†Ô∏è ƒê√£ x·∫£y ra s·ª± c·ªë khi ƒë·ªçc d·ªØ li·ªáu c√†i ƒë·∫∑t. Vui l√≤ng th·ª≠ l·∫°i sau! ", threadID, messageID);
    }

    // Toggle tr·∫°ng th√°i ch·∫ø ƒë·ªô ntbonly cho thread hi·ªán t·∫°i
    data[threadID] = !data[threadID];
    fs.writeFileSync(filePath, JSON.stringify(data, null, 4), 'utf-8');

    if (data[threadID]) {
        api.sendMessage("‚úÖ Ch·∫ø ƒë·ªô h·∫°n ch·∫ø s·ª≠ d·ª•ng bot ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng! Ch·ªâ nh·ªØng ng∆∞·ªùi thu√™ bot ho·∫∑c admin m·ªõi c√≥ th·ªÉ ra l·ªánh. ", threadID, messageID);
    } else {
        api.sendMessage("üîì Ch·∫ø ƒë·ªô h·∫°n ch·∫ø s·ª≠ d·ª•ng bot ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a. B√¢y gi·ªù m·ªçi ng∆∞·ªùi trong nh√≥m ƒë·ªÅu c√≥ th·ªÉ t∆∞∆°ng t√°c v·ªõi bot. ", threadID, messageID);
    }
};

module.exports.handleCommand = function({ api, event, next }) { // Th√™m api v√†o handleCommand
    const { threadID, senderID, body } = event;
    const filePath = path.resolve(__dirname, 'cache', 'ntbonly.json');
    let data = {};

    // ƒê·∫£m b·∫£o file t·ªìn t·∫°i tr∆∞·ªõc khi ƒë·ªçc
    if (!fs.existsSync(filePath)) {
        console.warn("File ntbonly.json kh√¥ng t·ªìn t·∫°i. ƒêang t·∫°o m·ªõi...");
        fs.writeFileSync(filePath, JSON.stringify({}), 'utf-8');
    }

    try {
        data = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
    } catch (error) {
        console.error("L·ªói ƒë·ªçc file ntbonly.json trong handleCommand:", error);
        // Kh√¥ng g·ª≠i tin nh·∫Øn l·ªói ·ªü ƒë√¢y ƒë·ªÉ tr√°nh spam, ch·ªâ b·ªè qua l·ªánh
        return next(); 
    }

    const { PREFIX } = global.config;
    // L·∫•y prefix c·ªßa nh√≥m ho·∫∑c prefix m·∫∑c ƒë·ªãnh
    const commandPrefix = (global.data.threadData.get(threadID) || {}).PREFIX || PREFIX;

    // Ki·ªÉm tra xem tin nh·∫Øn c√≥ ph·∫£i l√† l·ªánh h·ª£p l·ªá v√† kh√¥ng ph·∫£i l·ªánh 'ntbonly'
    if (!body || !body.startsWith(commandPrefix) || body.toLowerCase().startsWith(`${commandPrefix}ntbonly`)) {
        return next(); // Kh√¥ng ph·∫£i l·ªánh bot, ho·∫∑c l√† l·ªánh ntbonly (lu√¥n cho ph√©p ch·∫°y ntbonly)
    }

    // L·∫•y t√™n l·ªánh t·ª´ tin nh·∫Øn
    const commandName = body.slice(commandPrefix.length).trim().split(/\s+/).shift().toLowerCase();

    // Ki·ªÉm tra xem l·ªánh c√≥ t·ªìn t·∫°i kh√¥ng (ƒë·ªÉ tr√°nh l·ªói khi ng∆∞·ªùi d√πng g√µ b·∫≠y)
    const commands = Array.from(global.client.commands.keys());
    if (!commands.includes(commandName)) {
        return next(); // L·ªánh kh√¥ng t·ªìn t·∫°i, b·ªè qua
    }

    // Ki·ªÉm tra n·∫øu ch·∫ø ƒë·ªô ntbonly ƒë∆∞·ª£c b·∫≠t cho thread hi·ªán t·∫°i
    if (data[threadID]) {
        let thuebotInfo = [];
        const thuebotDataPath = path.resolve(__dirname, 'cache', 'data', 'thuebot.json');

        // ƒê·∫£m b·∫£o file thuebot.json t·ªìn t·∫°i v√† c√≥ th·ªÉ ƒë·ªçc ƒë∆∞·ª£c
        if (fs.existsSync(thuebotDataPath)) {
            try {
                thuebotInfo = JSON.parse(fs.readFileSync(thuebotDataPath, 'utf-8'));
            } catch (error) {
                console.error("L·ªói ƒë·ªçc file thuebot.json:", error);
                // N·∫øu kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file thuebot.json, coi nh∆∞ kh√¥ng c√≥ ng∆∞·ªùi thu√™
            }
        }

        const renterIDs = thuebotInfo.map(item => item.id);
        const adminIDs = global.config.ADMIN;

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh hay kh√¥ng
        if (renterIDs.includes(senderID) || adminIDs.includes(senderID)) {
            return next(); // Cho ph√©p l·ªánh ƒë∆∞·ª£c th·ª±c thi
        } else {
            // Ch·∫∑n l·ªánh v√† th√¥ng b√°o cho ng∆∞·ªùi d√πng
            return api.sendMessage(`‚ö†Ô∏è Xin l·ªói, b·∫°n kh√¥ng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng bot khi ch·∫ø ƒë·ªô h·∫°n ch·∫ø ƒëang b·∫≠t. Vui l√≤ng li√™n h·ªá admin n·∫øu c·∫ßn tr·ª£ gi√∫p! `, threadID);
        }
    } else {
        return next(); // N·∫øu ch·∫ø ƒë·ªô ntbonly kh√¥ng b·∫≠t, b·ªè qua ki·ªÉm tra
    }
};
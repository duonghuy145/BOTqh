const axios = require("axios");
const fs = require("fs-extra"); // D√πng fs-extra ƒë·ªÉ d·ªÖ thao t√°c v·ªõi file
const path = require("path");

module.exports.config = {
    name: "spotify",
    version: "1.1.1", // N√¢ng version l√™n ƒë·ªÉ ƒë√°nh d·∫•u thay ƒë·ªïi
    hasPermssion: 0,
    credits: "DongDev (Modded by qh v√† Gemini) üëë", // Th√™m credit c·ªßa m√†y v√† tao
    description: "üéµ T√¨m ki·∫øm v√† t·∫£i nh·∫°c MP3 t·ª´ Spotify m·ªôt c√°ch nhanh ch√≥ng! üöÄ",
    commandCategory: "Gi·∫£i Tr√≠", // ƒê·ªïi sang category Gi·∫£i Tr√≠ cho h·ª£p l√Ω
    usages: "[t√™n b√†i h√°t ho·∫∑c link spotify]",
    cooldowns: 5, // TƒÉng cooldown ƒë·ªÉ tr√°nh spam API
};

// H√†m t√¨m ki·∫øm tr√™n Spotify
async function searchSpotify(keywords, limit = 5) { // Gi·ªõi h·∫°n 5 k·∫øt qu·∫£ cho g·ªçn
    try {
        const res = await axios.get(`https://subhatde.id.vn/spotify?q=${encodeURIComponent(keywords)}`);
        return res.data.slice(0, limit);
    } catch (error) {
        console.error("‚ùå L·ªói khi t√¨m ki·∫øm Spotify:", error.response ? error.response.data : error.message);
        throw new Error("Kh√¥ng th·ªÉ t√¨m ki·∫øm nh·∫°c Spotify l√∫c n√†y. üò• Vui l√≤ng th·ª≠ l·∫°i sau!");
    }
}

// H√†m t·∫£i nh·∫°c t·ª´ Spotify
async function downloadSpotify(url) {
    try {
        const res = await axios.get(`https://subhatde.id.vn/spotify/down?url=${encodeURIComponent(url)}`);
        if (!res.data || !res.data.success) {
            throw new Error(res.data.message || "Kh√¥ng th·ªÉ t·∫£i b√†i h√°t n√†y. üòï");
        }
        return res.data;
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i nh·∫°c Spotify:", error.response ? error.response.data : error.message);
        throw new Error("Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫£i b√†i h√°t n√†y. üôÅ Vui l√≤ng th·ª≠ link kh√°c ho·∫∑c th·ª≠ l·∫°i sau.");
    }
}

module.exports.run = async function ({ api, event, args }) {
    const { threadID, messageID } = event;
    const keyword = args.join(" ").trim();

    if (!keyword) {
        return api.sendMessage("‚ö†Ô∏è B·∫°n qu√™n nh·∫≠p t·ª´ kh√≥a r·ªìi! H√£y nh·∫≠p t√™n b√†i h√°t ho·∫∑c link Spotify b·∫°n mu·ªën t√¨m nh√©. üé∂", threadID, messageID);
    }

    api.sendMessage("üîç ƒêang t√¨m ki·∫øm nh·∫°c tr√™n Spotify, ƒë·ª£i ch√∫t x√≠u nha... ‚ú®", threadID, messageID);

    try {
        const dataSearch = await searchSpotify(keyword);

        if (!dataSearch || dataSearch.length === 0) {
            return api.sendMessage(`‚ùé Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a "${keyword}". B·∫°n th·ª≠ l·∫°i v·ªõi t·ª´ kh√≥a kh√°c xem sao? ü§î`, threadID, messageID);
        }

        // B·ªè ph·∫ßn x·ª≠ l√Ω v√† g·ª≠i ·∫£nh thumbnail ·ªü ƒë√¢y
        const messages = dataSearch.map((item, index) => {
            return `\n${index + 1}. üéµ ${item.title}\n   ‚ú® Ngh·ªá sƒ©: ${item.artist}\n   ‚è≥ Th·ªùi l∆∞·ª£ng: ${item.duration}\n`;
        });

        const listTrack = {
            body: `üé∂ ƒê√¢y l√† c√°c k·∫øt qu·∫£ t√¨m ki·∫øm cho "${keyword}":\n${messages.join("")}\n\nüëâ H√£y reply (ph·∫£n h·ªìi) theo s·ªë th·ª© t·ª± c·ªßa b√†i h√°t b·∫°n mu·ªën t·∫£i nh√©! üì•`,
            // Kh√¥ng c√≤n attachment ·ªü ƒë√¢y
        };

        api.sendMessage(listTrack, threadID, (error, info) => {
            if (error) {
                console.error("‚ùå L·ªói g·ª≠i tin nh·∫Øn danh s√°ch:", error);
                return api.sendMessage("Oops! C√≥ l·ªói khi hi·ªÉn th·ªã danh s√°ch b√†i h√°t. üò≠", threadID, messageID);
            }
            // L∆∞u handleReply ƒë·ªÉ x·ª≠ l√Ω l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
            global.client.handleReply.push({
                type: "choose",
                name: module.exports.config.name,
                author: event.senderID, // L∆∞u senderID c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ ch·ªâ ng∆∞·ªùi ƒë√≥ m·ªõi ƒë∆∞·ª£c reply
                messageID: info.messageID, // ID c·ªßa tin nh·∫Øn ch·ª©a danh s√°ch
                dataTrack: dataSearch,
            });
        }, messageID);
    } catch (error) {
        console.error("‚ùå L·ªói trong qu√° tr√¨nh ch·∫°y l·ªánh Spotify:", error);
        api.sendMessage(`L·ªói r·ªìi qh ∆°i! ü•∫ ${error.message}`, threadID, messageID);
    }
};

module.exports.handleReply = async function ({ event, api, handleReply }) {
    const { threadID, senderID, body } = event;

    // ƒê·∫£m b·∫£o ch·ªâ ng∆∞·ªùi ƒë√£ d√πng l·ªánh m·ªõi c√≥ th·ªÉ reply
    if (senderID !== handleReply.author) {
        return api.sendMessage("üö´ B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi ƒë√£ y√™u c·∫ßu l·ªánh n√†y, vui l√≤ng d√πng l·ªánh m·ªõi nh√©! üò¨", threadID);
    }

    if (handleReply.type === 'choose') {
        const choice = parseInt(body);

        if (isNaN(choice) || choice <= 0 || choice > handleReply.dataTrack.length) {
            return api.sendMessage('‚ö†Ô∏è L·ª±a ch·ªçn c·ªßa b·∫°n kh√¥ng h·ª£p l·ªá. H√£y nh·∫≠p s·ªë th·ª© t·ª± c·ªßa b√†i h√°t trong danh s√°ch nh√©! üî¢', threadID);
        }

        const chosenItem = handleReply.dataTrack[choice - 1];

        api.sendMessage(`üîÑ Tuy·ªát v·ªùi! ƒêang chu·∫©n b·ªã t·∫£i "${chosenItem.title}" cho b·∫°n ƒë√¢y... Xin ch·ªù gi√¢y l√°t nha! ‚è≥`, threadID);

        try {
            const downloadData = await downloadSpotify(chosenItem.url);

            const filePath = path.join(__dirname, 'cache', `${chosenItem.title}_${chosenItem.id}.mp3`); // T√™n file ƒë·ªôc ƒë√°o h∆°n
            await fs.ensureDir(path.dirname(filePath)); // ƒê·∫£m b·∫£o th∆∞ m·ª•c cache t·ªìn t·∫°i

            // T·∫£i v√† l∆∞u file MP3
            const response = await axios({
                url: downloadData.downloadUrl,
                method: 'GET',
                responseType: 'stream'
            });

            const writer = fs.createWriteStream(filePath);
            response.data.pipe(writer);

            await new Promise((resolve, reject) => {
                writer.on('finish', resolve);
                writer.on('error', reject);
            });

            // G·ª≠i tin nh·∫Øn k√®m file
            api.sendMessage({
                body: `üéß ƒê√¢y l√† b√†i h√°t c·ªßa b·∫°n: "${downloadData.title}"\n‚Ä¢ Ca sƒ©: ${downloadData.artist}\n‚Ä¢ Album: ${downloadData.album}\n‚Ä¢ Ph√°t h√†nh: ${downloadData.released}\n\nCh√∫c b·∫°n nghe nh·∫°c vui v·∫ª! üéâ`,
                attachment: fs.createReadStream(filePath)
            }, threadID, async (err, info) => {
                if (err) {
                    console.error("‚ùå L·ªói g·ª≠i file nh·∫°c:", err);
                    return api.sendMessage("Xin l·ªói, c√≥ v·∫ª t√¥i kh√¥ng th·ªÉ g·ª≠i file nh·∫°c n√†y. üò≠", threadID);
                }
                // X√≥a tin nh·∫Øn danh s√°ch v√† file nh·∫°c sau khi g·ª≠i th√†nh c√¥ng
                try {
                    api.unsendMessage(handleReply.messageID); // G·ª° tin nh·∫Øn ch·ª©a danh s√°ch b√†i h√°t
                    await fs.unlink(filePath); // X√≥a file nh·∫°c
                    console.log(`‚úÖ ƒê√£ x√≥a file nh·∫°c: ${filePath}`);
                } catch (cleanError) {
                    console.error("‚ö†Ô∏è L·ªói khi x√≥a tin nh·∫Øn/file nh·∫°c:", cleanError);
                }
            }, event.messageID); // Reply v√†o tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng

        } catch (error) {
            console.error("‚ùå L·ªói x·ª≠ l√Ω t·∫£i xu·ªëng trong handleReply:", error);
            api.sendMessage(`√îi kh√¥ng! ü§Ø ${error.message || 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i b√†i h√°t.'} Vui l√≤ng th·ª≠ l·∫°i sau nh√©!`, threadID);
            // ƒê·∫£m b·∫£o x√≥a file t·∫°m n·∫øu c√≥ l·ªói trong qu√° tr√¨nh t·∫£i/g·ª≠i
            const tempFilePath = path.join(__dirname, 'cache', `${chosenItem.title}_${chosenItem.id}.mp3`);
            if (fs.existsSync(tempFilePath)) {
                try {
                    await fs.unlink(tempFilePath);
                    console.log(`üóëÔ∏è ƒê√£ x√≥a file t·∫°m: ${tempFilePath}`);
                } catch (e) {
                    console.error(`‚ùå L·ªói khi x√≥a file t·∫°m: ${tempFilePath}`, e);
                }
            }
        }
    }
};
const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs-nextra'); // S·ª≠ d·ª•ng fs-nextra ƒë·ªÉ t·∫≠n d·ª•ng Promise-based file operations
const path = require('path');
const { image } = require('image-downloader'); // V·∫´n gi·ªØ image-downloader v√¨ n√≥ ti·ªán cho vi·ªác t·∫£i ·∫£nh

module.exports.config = {
    name: 'tachnen',
    version: '1.1.2', // N√¢ng version l√™n x√≠u ‚¨ÜÔ∏è
    hasPermssion: 0,
    credits: 'Vihoo, modded by qh and Gemini ‚ú®', // Gi·ªØ nguy√™n credits g·ªëc v√† th√™m t√™n ch√∫ng ta
    description: 't√°ch n·ªÅn ·∫£nh ngay l·∫≠p t·ª©c! üñºÔ∏è', // Ch·ªØ th∆∞·ªùng, vi·∫øt hoa ƒë·∫ßu d√≤ng + icon
    commandCategory: 'ti·ªán √≠ch üõ†Ô∏è', // Ch·ªØ th∆∞·ªùng, vi·∫øt hoa ƒë·∫ßu d√≤ng + icon
    usages: '[reply ·∫£nh]', // S√∫c t√≠ch h∆°n
    cooldowns: 5 // TƒÉng cooldown l√™n 5 gi√¢y
};

module.exports.run = async function({ api, event }) { // B·ªè args v√¨ kh√¥ng d√πng cho URL ·∫£nh
    const { threadID, messageID, type, messageReply } = event;
    const cacheDir = path.resolve(__dirname, 'cache');
    const inputPath = path.join(cacheDir, `original_${threadID}_${messageID}.png`); // T√™n file r√µ r√†ng h∆°n
    const outputPath = path.join(cacheDir, `no_background_${threadID}_${messageID}.png`); // T√™n file r√µ r√†ng h∆°n

    // Danh s√°ch API Keys (l∆∞u √Ω: n√™n b·∫£o m·∫≠t c√°c key n√†y, kh√¥ng n√™n hardcode tr·ª±c ti·∫øp trong code public n·∫øu c√≥ th·ªÉ)
    const apiKeys = [
        "t4Jf1ju4zEpiWbKWXxoSANn4", "CTWSe4CZ5AjNQgR8nvXKMZBd", "PtwV35qUq557yQ7ZNX1vUXED",
        "wGXThT64dV6qz3C6AhHuKAHV", "82odzR95h1nRp97Qy7bSRV5M", "4F1jQ7ZkPbkQ6wEQryokqTmo",
        "sBssYDZ8qZZ4NraJhq7ySySR", "NuZtiQ53S2F5CnaiYy4faMek", "f8fujcR1G43C1RmaT4ZSXpwW"
    ];

    try {
        if (type !== "message_reply" || !messageReply.attachments || messageReply.attachments.length === 0) {
            return api.sendMessage("B·∫°n ph·∫£i reply m·ªôt ·∫£nh ƒë·ªÉ t√°ch n·ªÅn nh√©! ‚òùÔ∏è", threadID, messageID); // Vi·∫øt hoa ƒë·∫ßu d√≤ng + icon
        }

        const attachment = messageReply.attachments[0];
        if (attachment.type !== "photo") {
            return api.sendMessage("ƒê√¢y kh√¥ng ph·∫£i l√† ·∫£nh. Vui l√≤ng reply m·ªôt ·∫£nh h·ª£p l·ªá nh√©! üö´", threadID, messageID); // Vi·∫øt hoa ƒë·∫ßu d√≤ng + icon
        }

        api.sendMessage("ƒêang t√°ch n·ªÅn cho ·∫£nh c·ªßa b·∫°n... Vui l√≤ng ch·ªù ch√∫t nh√©! ‚è≥", threadID, messageID); // Th√¥ng b√°o ƒëang x·ª≠ l√Ω

        // T·∫°o th∆∞ m·ª•c cache n·∫øu ch∆∞a t·ªìn t·∫°i
        if (!fs.existsSync(cacheDir)) {
            await fs.mkdir(cacheDir);
        }

        // T·∫£i ·∫£nh g·ªëc v·ªÅ cache
        await image({
            url: attachment.url,
            dest: inputPath
        });

        // T·∫°o FormData ƒë·ªÉ g·ª≠i ·∫£nh l√™n API
        const formData = new FormData();
        formData.append('size', 'auto');
        formData.append('image_file', fs.createReadStream(inputPath), path.basename(inputPath));

        // Ch·ªçn ng·∫´u nhi√™n m·ªôt API Key
        const randomApiKey = apiKeys[Math.floor(Math.random() * apiKeys.length)];

        // G·ª≠i y√™u c·∫ßu t√°ch n·ªÅn
        const response = await axios({
            method: 'post',
            url: 'https://api.remove.bg/v1.0/removebg',
            data: formData,
            responseType: 'arraybuffer',
            headers: {
                ...formData.getHeaders(),
                'X-Api-Key': randomApiKey,
            },
            encoding: null // ƒê·ªÉ nh·∫≠n d·ªØ li·ªáu nh·ªã ph√¢n
        });

        // X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ API
        if (response.status !== 200) {
            console.error('L·ªói t·ª´ API remove.bg:', response.status, response.statusText, response.data.toString('utf8'));
            if (response.status === 402) { // 402 Payment Required - H·∫øt l∆∞·ª£t s·ª≠ d·ª•ng API
                return api.sendMessage("R·∫•t ti·∫øc, c√°c API key ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng trong h√¥m nay. Vui l√≤ng th·ª≠ l·∫°i v√†o ng√†y mai nh√©! üò•", threadID, messageID);
            }
            return api.sendMessage("ƒê√£ x·∫£y ra l·ªói khi t√°ch n·ªÅn ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i sau. ‚ùå", threadID, messageID); // Vi·∫øt hoa ƒë·∫ßu d√≤ng + icon
        }

        // L∆∞u ·∫£nh ƒë√£ t√°ch n·ªÅn
        await fs.writeFileSync(outputPath, Buffer.from(response.data, 'binary'));

        // G·ª≠i ·∫£nh ƒë√£ t√°ch n·ªÅn v·ªÅ ng∆∞·ªùi d√πng
        await api.sendMessage({
            body: `ƒê√£ t√°ch n·ªÅn th√†nh c√¥ng ·∫£nh c·ªßa b·∫°n! ü•≥`, // Th√™m body tin nh·∫Øn
            attachment: fs.createReadStream(outputPath)
        }, threadID, messageID);

    } catch (e) {
        console.error("L·ªói khi th·ª±c hi·ªán l·ªánh t√°ch n·ªÅn:", e); // Log l·ªói chi ti·∫øt
        let errorMessage = "ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi t√°ch n·ªÅn ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i sau. üò•"; // M·∫∑c ƒë·ªãnh
        if (e.response && e.response.status === 402) {
             errorMessage = "R·∫•t ti·∫øc, c√°c API key ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng trong h√¥m nay. Vui l√≤ng th·ª≠ l·∫°i v√†o ng√†y mai nh√©! üò•";
        } else if (e.code === 'ENOTFOUND' || e.code === 'ECONNREFUSED') {
            errorMessage = "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß t√°ch n·ªÅn. C√≥ th·ªÉ do l·ªói m·∫°ng ho·∫∑c API ƒëang b·∫£o tr√¨. üåê";
        }
        api.sendMessage(errorMessage, threadID, messageID); // Vi·∫øt hoa ƒë·∫ßu d√≤ng + icon
    } finally {
        // Lu√¥n lu√¥n x√≥a c√°c file cache
        if (await fs.exists(inputPath)) {
            await fs.unlink(inputPath).catch(err => console.error("L·ªói khi x√≥a input cache:", err));
        }
        if (await fs.exists(outputPath)) {
            await fs.unlink(outputPath).catch(err => console.error("L·ªói khi x√≥a output cache:", err));
        }
    }
};